{"id":2210,"fid":"2089","name":"找出数组排序后的目标下标","slug":"find-target-indices-after-sorting-array","link":"https://leetcode.cn/problems/find-target-indices-after-sorting-array/description/","percent":79.90902646502836,"level":"Easy","category":"algorithms","totalAC":"13.5K","totalSubmit":"16.9K","likes":19,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 以及一个目标元素 <code>target</code> 。</p>\n\n<p><strong>目标下标</strong> 是一个满足&nbsp;<code>nums[i] == target</code> 的下标 <code>i</code> 。</p>\n\n<p>将 <code>nums</code> 按 <strong>非递减</strong> 顺序排序后，返回由 <code>nums</code> 中目标下标组成的列表。如果不存在目标下标，返回一个 <strong>空</strong> 列表。返回的列表必须按 <strong>递增</strong> 顺序排列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,5,2,3], target = 2\n<strong>输出：</strong>[1,2]\n<strong>解释：</strong>排序后，nums 变为 [1,<em><strong>2</strong></em>,<em><strong>2</strong></em>,3,5] 。\n满足 nums[i] == 2 的下标是 1 和 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,5,2,3], target = 3\n<strong>输出：</strong>[3]\n<strong>解释：</strong>排序后，nums 变为 [1,2,2,<em><strong>3</strong></em>,5] 。\n满足 nums[i] == 3 的下标是 3 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,5,2,3], target = 5\n<strong>输出：</strong>[4]\n<strong>解释：</strong>排序后，nums 变为 [1,2,2,3,<em><strong>5</strong></em>] 。\n满足 nums[i] == 5 的下标是 4 。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,5,2,3], target = 4\n<strong>输出：</strong>[]\n<strong>解释：</strong>nums 中不含值为 4 的元素。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i], target &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> targetIndices(vector<int>& nums, int target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> targetIndices(int[] nums, int target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def targetIndices(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def targetIndices(self, nums: List[int], target: int) -> List[int]:"},{"value":"c","text":"C","defaultCode":"\n\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* targetIndices(int* nums, int numsSize, int target, int* returnSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<int> TargetIndices(int[] nums, int target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar targetIndices = function(nums, target) {\n\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef target_indices(nums, target)\n\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func targetIndices(_ nums: [Int], _ target: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func targetIndices(nums []int, target int) []int {\n\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def targetIndices(nums: Array[Int], target: Int): List[Int] = {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun targetIndices(nums: IntArray, target: Int): List<Int> {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn target_indices(nums: Vec<i32>, target: i32) -> Vec<i32> {\n\n    }\n}"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function targetIndices($nums, $target) {\n\n    }\n}"},{"value":"typescript","text":"TypeScript","defaultCode":"function targetIndices(nums: number[], target: number): number[] {\n\n};"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (target-indices nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec target_indices(Nums :: [integer()], Target :: integer()) -> [integer()].\ntarget_indices(Nums, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec target_indices(nums :: [integer], target :: integer) :: [integer]\n  def target_indices(nums, target) do\n\n  end\nend"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> targetIndices(List<int> nums, int target) {\n\n  }\n}"}],"testcase":"[1,2,5,2,3]\n2","testable":true,"templateMeta":{"name":"targetIndices","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"target"}],"return":{"type":"list<integer>"}}}